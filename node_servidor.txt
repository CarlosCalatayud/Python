//PRACTICA IV (SERVIDOR).
// Display 5161AS
const int A = 12; // D6
const int B = 14; // D5
const int C = 2; // D4
const int D = 5; // D1
const int E = 4; // D2
const int F = 13; // D7
const int G = 15; // D8
const int DP = 0; // el punto, de momento no se usa
#include <LiquidCrystal_I2C.h>                         //PRIMERAMENTE INCLUIMOS LAS LIBRERIAS NECESARIAS, DEPENDIENDO DE LOS ELEMENTOS A UTILIZAR
#include <Wire.h>                                     //EN ESTE CASO UTILIZAREMOS UNA PANTALLA LCD, UN MANDO Y UN RECEPTOR INFRARROJO

LiquidCrystal_I2C lcd(0x27, 16, 2);// si no funciona la LCD probar con 0x27, en lugar de 0x3f

void setup() {
        Serial.begin(115200);
        pinMode(A, OUTPUT);  // Asignación de las salidas digitales
        pinMode(B, OUTPUT);
        pinMode(C, OUTPUT);
        pinMode(D, OUTPUT);
        pinMode(E, OUTPUT);
        pinMode(F, OUTPUT);
        pinMode(G, OUTPUT);

        //Wire.begin(5, 4);  //AQUI PONGO LOS PINES LOS CUALES VOY A CONECTAR LA LCD.
        lcd.setBacklight(HIGH); //Use predefined PINS consts
        lcd.begin(16,2);
        lcd.home();
        lcd.setCursor(0,1); // Situa el cursor en 2ª Fila
        lcd.print("Practica IV"); // Muestra mensaje inicial
}
String leerLinea() {
  // Espera hasta que haya algo que leer
  while(Serial.available() < 1) {
    delay(1);
  }
  return Serial.readStringUntil('\n'); // Recibe info hasta '\n'
}
void display (int a, int b, int c, int d, int e, int f, int g) {
  digitalWrite(A,a);   //Se reciben 7 variables y se asignan
  digitalWrite(B,b);   //a cada una de las salidas
  digitalWrite(C,c);
  digitalWrite(D,d);
  digitalWrite(E,e);
  digitalWrite(F,f);
  digitalWrite(G,g);
}
void escribeLCD(String t) {
      lcd.clear(); // Limpia el LCD
      if(t!="") {
        lcd.setCursor(0,0); // Coloca cursor en fila 0
        lcd.print(t); // Muestra cadena
        }
       else {
          lcd.setCursor(0,1); // Coloca cursor en fila 1
          lcd.print( "----Rebote--"); // Muestra mensaje rebote
      }
      delay(200); // Retardo para evitar rebote
}


// Funcion que devuelve como String el contenido entre dos "car" (carácter)
// comenzando en "inic" y hasta que se encuentra un "car", fin tendrá el
 // índice donde comienza el siguiente campo
String cortaTrozo(String s, int inic, int *fin, char car, bool corta) {
  int pos_car;
  pos_car = s.indexOf(car,inic); // posicion de car empezando en inic
  *fin = pos_car + 1; // fin se asigna a donde comienza el siguiente campo
  if (pos_car!=-1) return s.substring(inic,pos_car); // Entre inic y fin
  else if (corta) return s.substring(inic); // Desde inic al final
  else return String("-1"); // Error, devuelve el String "-1"
}

int maximas_apariciones_en_vector(int v[], int tam) {
 int mas_rep = 0;
 int max_rep = 0;
 for (int j = 1; j<=5; j = j + 1){   
    int n = 0;
    for (int i= 0; i< tam; i = i + 1 ){
      if (v[i] == j){
        n = n +1;
      }
      
    }
    if (n>max_rep){
      mas_rep = j;
      max_rep =n;
    }
    
    
    
    
 }
 if (mas_rep == 1){
   display (0,1,1,0,0,0,0);
 }
 if (mas_rep == 2){
   display (1,1,0,1,1,0,1);
 }
 if (mas_rep == 3){
   display (1,1,1,1,0,0,1);
 }
 if (mas_rep == 4){
   display (0,1,1,0,0,1,1);
 }
 if (mas_rep == 5){
   display (1,0,1,1,0,1,1);
 }
 return mas_rep;
}

    

void loop() {
        String s;
        String on_off;
        String a;
        int result;
        int fin;
        if(Serial.available() > 0) {
                 //digitalWrite(LED0, HIGH); //ENCIENDO UN LED PARA VER VISUALMENTE CUANDO LE LLEGA UNA TRAMA AL NODE
                 s = Serial.readStringUntil('\n'); // ESTA FUNCION ES ENCARGADA DE cortar la CADENA LEIADA HASTA UN ULTIMO CARACTER INDICADO COMO PARAMENTRO(en este caso hasta '\n')
                 String N = cortaTrozo(s,2,&fin,':', true);
                 String V = cortaTrozo(s,fin,&fin,'\n', true);
                 int v [N.toInt()];
                 escribeLCD("V"+V);
                 delay(3500);
                 for (int i= 0; i< N.toInt(); i = i + 1) {
                  v[i] = String(V[i+i]).toInt();
                 }
                 int num_mas_rep = maximas_apariciones_en_vector(v, N.toInt());
                 //escribeLCD("mas repetido" +String(num_mas_rep));
                 delay(3000);
                 //escribeLCD(v);
                 //delay(1000);
                 //int v = [];
                 //for (i= 0; i < cad.length(); i = i+1) {
                  
                 //}
                 
                 //a = cortaTrozo(s,2,&fin,';', true); //s es la cadena a cotar, el 2 es la posicion de inicio...ponemos  ";" ya que queremos que pare de cortar cuando encuentre el; esta sera ahora la nueva posicion de inicio, y se llamara fin.
                 //escribeLCD(s);
                 //delay(1500);
                 
                 //ESCRIBO EN LA LCD LOS VALORES DE A Y DE B, PARA VER QUE  MI FUNCION CORTATROZO HA CORTADO CORRECTAMENTE LA TRAMA TAL Y COMO YO QUERIA.
                 
                  
                  
                 //escribo el resultado en la pantalla lcd

                 //PROCEDO A ENVIAR EL RESULTADO AL CLIENTE PHYTON
                 Serial.println( String(num_mas_rep) ); 
                 
        }
                 
                 
        delay(10); // Para parar un poco el nodeMCU, no necesario


        }      
 